Index: ../../.idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../.idea/inspectionProfiles/profiles_settings.xml b/../../.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1652450806839)
+++ b/../../.idea/inspectionProfiles/profiles_settings.xml	(date 1652450806839)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: ../../ecourses/ecourses/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/ecourses/urls.py b/../../ecourses/ecourses/urls.py
new file mode 100644
--- /dev/null	(date 1652450806899)
+++ b/../../ecourses/ecourses/urls.py	(date 1652450806899)
@@ -0,0 +1,50 @@
+"""ecourses URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/4.0/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+import debug_toolbar
+from django.contrib import admin
+from django.urls import path, include, re_path
+from drf_yasg.views import get_schema_view
+from drf_yasg import openapi
+from rest_framework import permissions
+
+schema_view = get_schema_view(
+    openapi.Info(
+        title="Route API",
+        default_version='v1',
+        description="APIs for CourseApp",
+        contact=openapi.Contact(email="nyle657@gmail.com"),
+        license=openapi.License(name="Lê Thảo Vân"),
+    ),
+    public=True,
+    permission_classes=(permissions.AllowAny,),
+)
+
+urlpatterns = [
+    path('', include('courses.urls')),
+    re_path(r'^ckeditor/', include('ckeditor_uploader.urls')),
+    path('admin/', admin.site.urls),
+    re_path(r'^swagger(?P<format>\.json|\.yaml)$',
+            schema_view.without_ui(cache_timeout=0),
+            name='schema-json'),
+    re_path(r'^swagger/$',
+            schema_view.with_ui('swagger', cache_timeout=0),
+            name = 'schema-swagger-ui'),
+    re_path(r'^redoc/$',
+            schema_view.with_ui('redoc', cache_timeout=0),
+            name='schema-redoc'),
+    path('__debug__/', include(debug_toolbar.urls)),
+    path('o/', include('oauth2_provider.urls', namespace='oauth2_provider')),
+]
\ No newline at end of file
Index: ../../ecourses/ecourses/wsgi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/ecourses/wsgi.py b/../../ecourses/ecourses/wsgi.py
new file mode 100644
--- /dev/null	(date 1652450806900)
+++ b/../../ecourses/ecourses/wsgi.py	(date 1652450806900)
@@ -0,0 +1,18 @@
+"""
+WSGI config for ecourses project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/4.0/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecourses.settings')
+
+application = get_wsgi_application()
+
+
Index: ../../.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../.idea/misc.xml b/../../.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1652450806839)
+++ b/../../.idea/misc.xml	(date 1652450806839)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (BTLon)" project-jdk-type="Python SDK" />
+  <component name="PyCharmProfessionalAdvertiser">
+    <option name="shown" value="true" />
+  </component>
+</project>
\ No newline at end of file
Index: ../../ecourses/ecourses/asgi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/ecourses/asgi.py b/../../ecourses/ecourses/asgi.py
new file mode 100644
--- /dev/null	(date 1652450806898)
+++ b/../../ecourses/ecourses/asgi.py	(date 1652450806898)
@@ -0,0 +1,16 @@
+"""
+ASGI config for ecourses project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/4.0/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecourses.settings')
+
+application = get_asgi_application()
Index: ../../ecourses/ecourses/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/ecourses/settings.py b/../../ecourses/ecourses/settings.py
new file mode 100644
--- /dev/null	(date 1652450806898)
+++ b/../../ecourses/ecourses/settings.py	(date 1652450806898)
@@ -0,0 +1,159 @@
+"""
+Django settings for ecourses project.
+
+Generated by 'django-admin startproject' using Django 4.0.4.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/4.0/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/4.0/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure-m4!x3mvb*cm)4wfd6-tg((b3k_%k^+u0e#!)7lr#@bpj+kr%np'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'courses.apps.CoursesConfig',
+    'ckeditor',
+    'ckeditor_uploader',
+    'rest_framework',
+    'drf_yasg',
+    'debug_toolbar',
+    'oauth2_provider',
+    'chartjs'
+]
+
+import pymysql
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+    'debug_toolbar.middleware.DebugToolbarMiddleware'
+]
+
+REST_FRAMEWORK = {
+    'DEFAULT_AUTHENTICATION_CLASSES': (
+        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
+    )
+}
+
+INTERNAL_IPS = [
+    '127.0.0.1'
+]
+
+MEDIA_ROOT = '%s/courses/static/' % BASE_DIR
+
+ROOT_URLCONF = 'ecourses.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'ecourses.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
+
+DATABASES = {
+     'default': {
+        'ENGINE': 'django.db.backends.mysql',
+        'NAME': 'btlon',
+        'USER': 'root',
+        'PASSWORD': '0908321340',
+        'HOST': ''  # mặc định localhost
+    }
+}
+
+
+import pymysql
+
+pymysql.install_as_MySQLdb()
+
+# Password validation
+# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/4.0/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/4.0/howto/static-files/
+
+CKEDITOR_UPLOAD_PATH = "images/buses/"
+
+STATIC_URL = 'static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
+
+AUTH_USER_MODEL = 'courses.User'
+
+
+
Index: ../../.idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../.idea/inspectionProfiles/Project_Default.xml b/../../.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(date 1652450806838)
+++ b/../../.idea/inspectionProfiles/Project_Default.xml	(date 1652450806838)
@@ -0,0 +1,26 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="PyArgumentEqualDefaultInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyChainedComparisonsInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyRedundantParenthesesInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyRelativeImportInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyShadowingBuiltinsInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredNames">
+        <list>
+          <option value="id" />
+        </list>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="PyShadowingNamesInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PySingleQuotedDocstringInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyUnresolvedReferencesInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredIdentifiers">
+        <list>
+          <option value="pymysql" />
+        </list>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="UnresolvedReference" enabled="true" level="WARNING" enabled_by_default="true" />
+  </profile>
+</component>
\ No newline at end of file
Index: ../../.idea/BTLon.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../.idea/BTLon.iml b/../../.idea/BTLon.iml
new file mode 100644
--- /dev/null	(date 1652450806838)
+++ b/../../.idea/BTLon.iml	(date 1652450806838)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: ../../ecourses/courses/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/views.py b/../../ecourses/courses/views.py
new file mode 100644
--- /dev/null	(date 1652450806891)
+++ b/../../ecourses/courses/views.py	(date 1652450806891)
@@ -0,0 +1,174 @@
+from rest_framework import viewsets, generics, status, permissions, mixins
+from rest_framework.decorators import action
+from rest_framework.response import Response
+from .models import Category, Route, Buses, Comment, User, Like, Rating
+from .perms import CommentOwnerPerms
+from .serializers import (
+    CategorySerializer, RouteSerializer,
+    BusesSerializer, BusesDetailSerializer,
+    AuthBusesDetailSerializer,
+    CommentSerializer, CreateCommentSerializer,
+    UserSerializer
+)
+
+from .paginators import RoutePaginator
+from drf_yasg.utils import swagger_auto_schema
+from .perms import CommentOwnerPerms
+
+
+class CategoryViewset(viewsets.ViewSet, generics.ListAPIView):
+    queryset = Category.objects.filter(active=True)
+    serializer_class = CategorySerializer
+
+    def get_queryset(self):
+        q = self.queryset
+
+        kw = self.request.query_params.get('kw')
+        if kw:
+            q = q.filter(name__icontains=kw)
+
+        return q
+
+
+
+class RouteViewSet(viewsets.ViewSet, generics.ListAPIView):
+    queryset = Route.objects.filter(active=True)
+    serializer_class = RouteSerializer
+    pagination_class = RoutePaginator
+
+    def get_queryset(self):
+        queryset = self.queryset
+
+        kw = self.request.query_params.get("kw")
+        if kw:
+            queryset = queryset.filter(destination__icontains=kw)
+
+        category_id = self.request.query_params.get("category_id")
+        if category_id:
+            queryset = queryset.filter(category_id=category_id)
+
+        return queryset
+
+    @swagger_auto_schema(
+        operation_description='Get the buses of a route',
+        responses={
+            status.HTTP_200_OK: RouteSerializer()
+        }
+    )
+    @action(methods=['get'], detail=True, url_path='buses')
+    def get_buses(self, request, pk):
+        # course = Course.objects.get(pk=pk)
+        course = self.get_object()
+        buses = course.buses.filter(active=True)
+
+        kw = request.query_params.get('kw')
+        if kw:
+            buses = buses.filter(destination__icontains=kw)
+
+        return Response(data=BusesSerializer(buses, many=True, context={'request': request}).data,
+                        status=status.HTTP_200_OK)
+
+
+class BusesViewSet(viewsets.ViewSet, generics.RetrieveAPIView):
+    queryset = Buses.objects.filter(active=True)
+    serializer_class = BusesDetailSerializer
+
+    def get_serializer_class(self):
+        if self.request.user.is_authenticated:
+            return AuthBusesDetailSerializer
+
+        return BusesDetailSerializer
+
+    def get_permissions(self):
+        if self.action in ['like', 'rating']:
+            return [permissions.IsAuthenticated()]
+
+        return [permissions.AllowAny()]
+
+    @swagger_auto_schema(
+        operation_description='Get the comments of a buses',
+        responses={
+            status.HTTP_200_OK: CommentSerializer()
+        }
+    )
+    @action(methods=['get'], url_path='comments', detail=True)
+    def get_comments(self, request, pk):
+        buses = self.get_object()
+        comments = buses.comments.select_related('user').filter(active=True)
+
+        return Response(CommentSerializer(comments, many=True).data,
+                        status=status.HTTP_200_OK)
+
+    @action(methods=['post'], url_path='like', detail=True)
+    def like(self, request, pk):
+        buses = self.get_object()
+        user = request.user
+
+        l, _ = Like.objects.get_or_create(buses=buses, user=user)
+        l.active = not l.active
+        try:
+            l.save()
+        except:
+            return Response(status=status.HTTP_500_INTERNAL_SERVER_ERROR)
+
+        return Response(data=AuthBusesDetailSerializer(buses, context={'request': request}).data,
+                        status=status.HTTP_200_OK)
+
+    @action(methods=['post'], url_path='rating', detail=True)
+    def rating(self, request, pk):
+        buses = self.get_object()
+        user = request.user
+
+        r, _ = Rating.objects.get_or_create(buses=buses, user=user)
+        r.rate = request.data.get('rate', 0)
+        try:
+            r.save()
+        except:
+            return Response(status=status.HTTP_500_INTERNAL_SERVER_ERROR)
+
+        return Response(data=AuthBusesDetailSerializer(buses, context={'request': request}).data,
+                        status=status.HTTP_200_OK)
+
+
+
+class CommentViewSet(viewsets.ViewSet, generics.CreateAPIView,
+                     generics.UpdateAPIView, generics.DestroyAPIView):
+    queryset = Comment.objects.filter(active=True)
+    serializer_class = CreateCommentSerializer
+    permission_classes = [permissions.IsAuthenticated]
+
+    def get_permissions(self):
+        if self.action in ['update', 'destroy']:
+            return [CommentOwnerPerms()]
+
+        return [permissions.IsAuthenticated()]
+
+
+
+
+class UserViewSet(viewsets.ViewSet, generics.CreateAPIView):
+    queryset = User.objects.filter(is_active=True)
+    serializer_class = UserSerializer
+
+    def get_permissions(self):
+        if self.action == 'current_user':
+            return [permissions.IsAuthenticated()]
+
+        return [permissions.AllowAny()]
+
+    @action(methods=['get'], url_path="current-user", detail=False)
+    def current_user(self, request):
+        return Response(self.serializer_class(request.user, context={'request': request}).data,
+                        status=status.HTTP_200_OK)
+
+
+class MyRouteView(generics.ListCreateAPIView):
+    lookup_field = ['destination']
+    queryset = Route.objects.filter(active=True)
+    serializer_class = RouteSerializer
+
+
+class MyRouteDetailView(generics.RetrieveAPIView):
+    queryset = Route.objects.filter(active=True)
+    serializer_class = RouteSerializer
+
Index: ../../ecourses/courses/tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/tests.py b/../../ecourses/courses/tests.py
new file mode 100644
--- /dev/null	(date 1652450806891)
+++ b/../../ecourses/courses/tests.py	(date 1652450806891)
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
Index: ../../.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../.idea/.gitignore b/../../.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1652450806838)
+++ b/../../.idea/.gitignore	(date 1652450806838)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: ../../ecourses/courses/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/urls.py b/../../ecourses/courses/urls.py
new file mode 100644
--- /dev/null	(date 1652450806891)
+++ b/../../ecourses/courses/urls.py	(date 1652450806891)
@@ -0,0 +1,17 @@
+from django.contrib import admin
+from django.urls import path, include
+from . import views
+from rest_framework import routers
+
+router = routers.DefaultRouter()
+router.register(prefix='categories', viewset=views.CategoryViewset, basename='category')
+router.register(prefix='route', viewset=views.RouteViewSet, basename='route')
+router.register(prefix='buses', viewset=views.BusesViewSet, basename='buses')
+router.register(prefix='comments', viewset=views.CommentViewSet, basename='comment')
+router.register(prefix='users', viewset=views.UserViewSet, basename='user')
+
+urlpatterns = [
+    path('', include(router.urls)),
+    path('my-route/', views.MyRouteView.as_view()),
+    path('my-route/<int:pk>/', views.MyRouteDetailView.as_view())
+]
\ No newline at end of file
Index: ../../ecourses/courses/templates/admin/route-stats.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/templates/admin/route-stats.html b/../../ecourses/courses/templates/admin/route-stats.html
new file mode 100644
--- /dev/null	(date 1652450806891)
+++ b/../../ecourses/courses/templates/admin/route-stats.html	(date 1652450806891)
@@ -0,0 +1,70 @@
+{% extends 'admin/base_site.html' %}
+
+{% block content %}
+<header>
+    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
+</header>
+<div style="margin: auto; width: 50%;">
+    <h1>THỐNG KÊ THÔNG TIN CÁC TUYẾN XE</h1>
+    <h4>Số lượng tuyến xe: {{ count1 }}</h4>
+    <h4>Số lượng chuyến xe: {{ count2 }}</h4>
+    <div class = "row">
+        <div class ="col-md-5 col-xs-12">
+            <table class="table">
+                <tr>
+                    <th>Tên tuyến xe</th>
+                    <th>Số lượng chuyến xe</th>
+                </tr>
+                {% for c in stats %}
+
+                <tr>
+                    <th>{{ c.destination }}</th>
+                    <th>{{ c.buses_count }}</th>
+                </tr>
+
+                {% endfor %}
+            </table>
+        </div>
+        <div class="col-md-5 col-xs-12">
+            <form>
+                <div class="form-group">
+                    <input type="number" min="2000" class="form-control" name="year" placeholder="Nhap nam..." />
+                </div>
+                <input type="submit" value="Thong ke" class="btn btn-danger"/>
+            </form>
+        </div>
+        <div>
+            <canvas id="myChart" style="width:100%;max-width:600px"></canvas>
+
+            <script>
+
+            var xValues = [{% for c in stats %}"{{ c.destination }}",{% endfor %}];
+            var yValues = [{% for c in stats %} {{ c.buses_count }},{% endfor %}];
+            var barColors = ["red", "green","blue","orange","brown"];
+
+            new Chart("myChart", {
+              type: "bar",
+              data: {
+                labels: xValues,
+                datasets: [{
+                  backgroundColor: barColors,
+                  data: yValues
+                }]
+              },
+              options: {
+                legend: {display: false},
+                title: {
+                  display: true,
+                  text: "Thống kê số lượng chuyến xe của tuyến xe"
+                }
+              }
+            });
+
+            </script>
+        </div>
+    </div>
+
+
+</div>
+{% endblock %}
+
Index: ../../ecourses/courses/perms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/perms.py b/../../ecourses/courses/perms.py
new file mode 100644
--- /dev/null	(date 1652450806863)
+++ b/../../ecourses/courses/perms.py	(date 1652450806863)
@@ -0,0 +1,10 @@
+from rest_framework import permissions
+
+
+class CommentOwnerPerms(permissions.IsAuthenticated):
+    def has_object_permission(self, request, view, comment):
+        """
+        Return `True` if permission is granted, `False` otherwise.
+        """
+
+        return request.user == comment.user
\ No newline at end of file
Index: ../../ecourses/courses/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/serializers.py b/../../ecourses/courses/serializers.py
new file mode 100644
--- /dev/null	(date 1652450806864)
+++ b/../../ecourses/courses/serializers.py	(date 1652450806864)
@@ -0,0 +1,112 @@
+from rest_framework import serializers
+from .models import Category, Route, Tag, Buses, User, Comment
+
+
+class CategorySerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Category
+        fields = "__all__"
+
+
+class RouteSerializer(serializers.ModelSerializer):
+
+    class Meta:
+        model = Route
+        fields = ['id', 'destination', 'category_id']
+
+
+class TagSeriazlier(serializers.ModelSerializer):
+    class Meta:
+        model = Tag
+        fields = ['id', 'name']
+
+
+class BusesSerializer(serializers.ModelSerializer):
+    image = serializers.SerializerMethodField(source='image')
+    tags = TagSeriazlier(many=True)
+
+    def get_image(self, obj):
+        request = self.context['request']
+        path = '/static/%s' % obj.image.name
+
+        return request.build_absolute_uri(path)
+
+    class Meta:
+        model = Buses
+        fields = ['id', 'time', 'price', 'route_name', 'driver_name', 'tags']
+
+
+class BusesDetailSerializer(BusesSerializer):
+    class Meta:
+        model = Buses
+        fields = BusesSerializer.Meta.fields + ['content']
+
+
+
+
+class AuthBusesDetailSerializer(BusesDetailSerializer):
+    like = serializers.SerializerMethodField()
+    rating = serializers.SerializerMethodField()
+
+    def get_like(self, buses):
+        request = self.context.get('request')
+        if request:
+            return buses.like_set.filter(user=request.user, active=True).exists()
+
+    def get_rating(self, lesson):
+        request = self.context.get('request')
+        if request:
+            r = lesson.rating_set.filter(user=request.user).first()
+            if r:
+                return r.rate
+
+    class Meta:
+        model = Buses
+        fields = BusesDetailSerializer.Meta.fields + ['like', 'rating']
+
+
+
+class UserSerializer(serializers.ModelSerializer):
+    avatar = serializers.SerializerMethodField(source='avatar')
+
+    def get_avatar(self, obj):
+        request = self.context['request']
+        if obj.avatar and not obj.avatar.name.startswith("/static"):
+
+            path = '/static/%s' % obj.avatar.name
+
+            return request.build_absolute_uri(path)
+
+    class Meta:
+        model = User
+        fields = ['id', 'first_name', 'last_name',
+                  'username', 'password', 'email',
+                  'avatar']
+        extra_kwargs = {
+            'password': {
+                'write_only': True
+            }
+        }
+
+    def create(self, validated_data):
+        data = validated_data.copy()
+        user = User(**data)
+        user.set_password(user.password)
+        user.save()
+
+        return user
+
+
+class CreateCommentSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Comment
+        fields = ['content', 'user', 'buses']
+
+
+class CommentSerializer(serializers.ModelSerializer):
+    user = UserSerializer()
+
+    class Meta:
+        model = Comment
+        exclude = ['active']
+
Index: ../../ecourses/courses/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/models.py b/../../ecourses/courses/models.py
new file mode 100644
--- /dev/null	(date 1652450806862)
+++ b/../../ecourses/courses/models.py	(date 1652450806862)
@@ -0,0 +1,133 @@
+from django.db import models
+from django.contrib.auth.models import AbstractUser
+
+from ckeditor.fields import RichTextField
+
+
+class User(AbstractUser):
+
+    avatar = models.ImageField(null=True, upload_to='users/%Y/%m')
+
+
+class ModelBase(models.Model):
+    active = models.BooleanField(default=True)
+    created_date = models.DateTimeField(auto_now_add=True)
+    updated_date = models.DateTimeField(auto_now=True)
+
+    class Meta:
+        abstract = True
+
+
+class Driver(ModelBase):  # tài xế
+    name = models.CharField(max_length=100, null=False, unique=True)
+    user = models.ForeignKey(User, on_delete=models.CASCADE, unique=True)
+    phone_number = models.CharField(max_length=10, null=False)
+    address = models.CharField(max_length=500)
+    date_of_bird = models.DateField(null=True, blank=True, verbose_name=('Ngày sinh'))
+
+    def __str__(self):
+        return self.name
+
+
+class Category(ModelBase):
+    name = models.CharField(max_length=50, unique=True, verbose_name=('Điểm xuất phát'))  # xuat phat tu
+
+    def __str__(self):
+        return self.name
+
+
+class Route(ModelBase):  # tuyen xe
+    destination = models.CharField(max_length=100, unique=True, verbose_name=('Tên tuyến xe'))  # ten tuyen xe
+    name = models.CharField(max_length=100, verbose_name=('Điểm đến'))  # diem den
+    category = models.ForeignKey(Category, null=True, on_delete=models.SET_NULL, verbose_name=('Điểm xuất phát'))
+
+    def __str__(self):
+        return self.destination
+
+    class Meta:
+        unique_together = ('destination', 'category')
+
+
+class Buses(ModelBase):  # chuyến xe
+    #content = RichTextField()
+    name = models.CharField(max_length=100, unique=True, verbose_name=('Tên xe khách'))
+    image = models.ImageField(null=True, blank=True, upload_to='buses/%Y/%m')
+    time = models.TimeField(null=True, blank=True,
+                            verbose_name=('Thời gian xuất phát')) #thoi gian xuất phát
+    route_name = models.ForeignKey(Route, related_name='buses1',
+                                    related_query_name='my_buses',
+                                    on_delete=models.CASCADE, verbose_name=('Tên tuyến xe')) #tuyến xe
+    price = models.IntegerField(null=True, verbose_name=('Giá'))
+    driver_name = models.ForeignKey(Driver, unique=True, on_delete=models.CASCADE,
+                                    verbose_name=('Tài xế chuyến xe')) #tài xế
+    created_date = models.DateTimeField(auto_now_add=True, verbose_name=('Ngày tạo'))
+    updated_date = models.DateTimeField(auto_now=True, verbose_name=('Ngày cập nhật'))
+    tags = models.ManyToManyField('Tag', blank=True,
+                                  related_name='buses')
+    viewers = models.ManyToManyField(User, through='UserBusesView')
+    seats_status = models.BooleanField(default=True, verbose_name=('Tình trạng số ghế'))
+
+    def __str__(self):
+        return self.name    #f'{self.name} (${self.price})'
+
+    class Meta:
+        unique_together = ('name', 'route_name')
+
+
+class UserBusesView(models.Model):
+    user = models.ForeignKey(User, on_delete=models.CASCADE)
+    buses = models.ForeignKey(Buses, on_delete=models.CASCADE)
+    counter = models.IntegerField(default=0)
+    reading_date = models.DateTimeField(auto_now=True)
+
+    class Meta:
+        unique_together = ('user', 'buses')
+
+
+class Ticket(ModelBase):
+    name = models.CharField(max_length=22, verbose_name=('Họ tên người mua vé')) #tên người mua vé
+    user = models.ForeignKey(User, on_delete=models.CASCADE) # user nguoi mua ve
+    buses = models.ForeignKey(Buses, on_delete=models.CASCADE, related_name='buses2',
+                                    related_query_name='my_buses2',verbose_name=('Tên chuyến xe')) #chuyến xe
+    phone_number = models.CharField(max_length=10, null=False)
+    created_date = models.DateTimeField(auto_now_add=True, verbose_name=('Ngày tạo'))
+    successful = models.BooleanField(default=False, verbose_name=('Tình trạng thanh toán'))
+
+    def __str__(self):
+        return self.name
+
+
+class Comment(ModelBase):
+    content = models.TextField()
+    buses = models.ForeignKey(Buses, related_name='comments',
+                               on_delete=models.CASCADE)
+    user = models.ForeignKey(User, on_delete=models.CASCADE)
+
+    def __str__(self):
+         return self.content
+
+
+class Tag(ModelBase):
+        name = models.CharField(max_length=50, unique=True)
+
+        def __str__(self):
+            return self.name
+
+class ActionBase(models.Model):
+    user = models.ForeignKey(User, on_delete=models.CASCADE)
+    buses = models.ForeignKey(Buses, on_delete=models.CASCADE)
+    created_date = models.DateTimeField(auto_now_add=True)
+    updated_date = models.DateTimeField(auto_now=True)
+
+    class Meta:
+        unique_together = ('user', 'buses')
+        abstract = True
+
+
+class Like(ActionBase):
+    active = models.BooleanField(default=False)
+
+
+class Rating(ActionBase):
+    rate = models.SmallIntegerField(default=0)
+
Index: ../../ecourses/courses/paginators.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/paginators.py b/../../ecourses/courses/paginators.py
new file mode 100644
--- /dev/null	(date 1652450806863)
+++ b/../../ecourses/courses/paginators.py	(date 1652450806863)
@@ -0,0 +1,5 @@
+from rest_framework import pagination
+
+
+class RoutePaginator(pagination.PageNumberPagination):
+    page_size = 4
\ No newline at end of file
Index: ../../ecourses/courses/migrations/0010_alter_buses_seats_status_alter_ticket_buses_name.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/migrations/0010_alter_buses_seats_status_alter_ticket_buses_name.py b/../../ecourses/courses/migrations/0010_alter_buses_seats_status_alter_ticket_buses_name.py
new file mode 100644
--- /dev/null	(date 1652450806856)
+++ b/../../ecourses/courses/migrations/0010_alter_buses_seats_status_alter_ticket_buses_name.py	(date 1652450806856)
@@ -0,0 +1,24 @@
+# Generated by Django 4.0.3 on 2022-05-06 07:52
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('courses', '0009_buses_seats_status'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='buses',
+            name='seats_status',
+            field=models.BooleanField(default=1, verbose_name='Tình trạng số ghế'),
+        ),
+        migrations.AlterField(
+            model_name='ticket',
+            name='buses_name',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='busesT', related_query_name='my_busesT', to='courses.buses', verbose_name='Tên chuyến xe'),
+        ),
+    ]
Index: ../../ecourses/courses/migrations/0008_alter_buses_car_name_alter_buses_driver_name_and_more.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/migrations/0008_alter_buses_car_name_alter_buses_driver_name_and_more.py b/../../ecourses/courses/migrations/0008_alter_buses_car_name_alter_buses_driver_name_and_more.py
new file mode 100644
--- /dev/null	(date 1652450806856)
+++ b/../../ecourses/courses/migrations/0008_alter_buses_car_name_alter_buses_driver_name_and_more.py	(date 1652450806856)
@@ -0,0 +1,89 @@
+# Generated by Django 4.0.3 on 2022-05-05 13:10
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('courses', '0007_alter_ticket_payment_status'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='buses',
+            name='car_name',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.car', unique=True, verbose_name='Tên xe'),
+        ),
+        migrations.AlterField(
+            model_name='buses',
+            name='driver_name',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.driver', unique=True, verbose_name='Tài xế chuyến xe'),
+        ),
+        migrations.AlterField(
+            model_name='buses',
+            name='name',
+            field=models.CharField(max_length=100, unique=True, verbose_name='Tên chuyến xe'),
+        ),
+        migrations.AlterField(
+            model_name='buses',
+            name='route_name',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buses', related_query_name='my_buses', to='courses.route', verbose_name='Tên tuyến xe'),
+        ),
+        migrations.AlterField(
+            model_name='buses',
+            name='time',
+            field=models.DateTimeField(blank=True, null=True, verbose_name='Thời gian xuất phát'),
+        ),
+        migrations.AlterField(
+            model_name='car',
+            name='name',
+            field=models.CharField(max_length=40, verbose_name='Tên xe'),
+        ),
+        migrations.AlterField(
+            model_name='car',
+            name='number',
+            field=models.CharField(max_length=40, verbose_name='Số ghế'),
+        ),
+        migrations.AlterField(
+            model_name='category',
+            name='name',
+            field=models.CharField(max_length=50, unique=True, verbose_name='Điểm xuất phát'),
+        ),
+        migrations.AlterField(
+            model_name='route',
+            name='category',
+            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='courses.category', verbose_name='Điểm xuất phát'),
+        ),
+        migrations.AlterField(
+            model_name='route',
+            name='destination',
+            field=models.CharField(max_length=100, unique=True, verbose_name='Tên tuyến xe'),
+        ),
+        migrations.AlterField(
+            model_name='route',
+            name='name',
+            field=models.CharField(max_length=100, verbose_name='Điểm đến'),
+        ),
+        migrations.AlterField(
+            model_name='route',
+            name='price',
+            field=models.CharField(max_length=50, verbose_name='Giá'),
+        ),
+        migrations.AlterField(
+            model_name='ticket',
+            name='Payment_status',
+            field=models.BooleanField(default=0, verbose_name='Tình trạng thanh toán'),
+        ),
+        migrations.AlterField(
+            model_name='ticket',
+            name='buses_name',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.buses', verbose_name='Tên chuyến xe'),
+        ),
+        migrations.AlterField(
+            model_name='ticket',
+            name='name',
+            field=models.CharField(max_length=22, verbose_name='Họ tên người mua vé'),
+        ),
+    ]
Index: ../../ecourses/courses/migrations/0009_buses_seats_status.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/migrations/0009_buses_seats_status.py b/../../ecourses/courses/migrations/0009_buses_seats_status.py
new file mode 100644
--- /dev/null	(date 1652450806856)
+++ b/../../ecourses/courses/migrations/0009_buses_seats_status.py	(date 1652450806856)
@@ -0,0 +1,18 @@
+# Generated by Django 4.0.3 on 2022-05-06 06:50
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('courses', '0008_alter_buses_car_name_alter_buses_driver_name_and_more'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='buses',
+            name='seats_status',
+            field=models.BooleanField(default=0, verbose_name='Tình trạng số ghế'),
+        ),
+    ]
Index: ../../ecourses/courses/migrations/0006_remove_ticket_number.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/migrations/0006_remove_ticket_number.py b/../../ecourses/courses/migrations/0006_remove_ticket_number.py
new file mode 100644
--- /dev/null	(date 1652450806854)
+++ b/../../ecourses/courses/migrations/0006_remove_ticket_number.py	(date 1652450806854)
@@ -0,0 +1,17 @@
+# Generated by Django 4.0.3 on 2022-05-05 13:00
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('courses', '0005_ticket_payment_status'),
+    ]
+
+    operations = [
+        migrations.RemoveField(
+            model_name='ticket',
+            name='number',
+        ),
+    ]
Index: ../../ecourses/courses/migrations/0007_alter_ticket_payment_status.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/migrations/0007_alter_ticket_payment_status.py b/../../ecourses/courses/migrations/0007_alter_ticket_payment_status.py
new file mode 100644
--- /dev/null	(date 1652450806855)
+++ b/../../ecourses/courses/migrations/0007_alter_ticket_payment_status.py	(date 1652450806855)
@@ -0,0 +1,18 @@
+# Generated by Django 4.0.3 on 2022-05-05 13:03
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('courses', '0006_remove_ticket_number'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='ticket',
+            name='Payment_status',
+            field=models.BooleanField(default=0, verbose_name='Payment status'),
+        ),
+    ]
Index: ../../ecourses/courses/migrations/0004_alter_buses_car_name.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/migrations/0004_alter_buses_car_name.py b/../../ecourses/courses/migrations/0004_alter_buses_car_name.py
new file mode 100644
--- /dev/null	(date 1652450806854)
+++ b/../../ecourses/courses/migrations/0004_alter_buses_car_name.py	(date 1652450806854)
@@ -0,0 +1,19 @@
+# Generated by Django 4.0.4 on 2022-05-04 14:28
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('courses', '0003_alter_driver_user'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='buses',
+            name='car_name',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.car', unique=True),
+        ),
+    ]
Index: ../../ecourses/courses/migrations/0005_ticket_payment_status.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/migrations/0005_ticket_payment_status.py b/../../ecourses/courses/migrations/0005_ticket_payment_status.py
new file mode 100644
--- /dev/null	(date 1652450806854)
+++ b/../../ecourses/courses/migrations/0005_ticket_payment_status.py	(date 1652450806854)
@@ -0,0 +1,18 @@
+# Generated by Django 4.0.3 on 2022-05-05 12:58
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('courses', '0004_alter_buses_car_name'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='ticket',
+            name='Payment_status',
+            field=models.BooleanField(default=0, verbose_name='Status'),
+        ),
+    ]
Index: ../../ecourses/courses/migrations/0002_alter_buses_driver_name.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/migrations/0002_alter_buses_driver_name.py b/../../ecourses/courses/migrations/0002_alter_buses_driver_name.py
new file mode 100644
--- /dev/null	(date 1652450806853)
+++ b/../../ecourses/courses/migrations/0002_alter_buses_driver_name.py	(date 1652450806853)
@@ -0,0 +1,19 @@
+# Generated by Django 4.0.4 on 2022-05-04 14:24
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('courses', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='buses',
+            name='driver_name',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.driver', unique=True),
+        ),
+    ]
Index: ../../ecourses/courses/migrations/0003_alter_driver_user.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/migrations/0003_alter_driver_user.py b/../../ecourses/courses/migrations/0003_alter_driver_user.py
new file mode 100644
--- /dev/null	(date 1652450806853)
+++ b/../../ecourses/courses/migrations/0003_alter_driver_user.py	(date 1652450806853)
@@ -0,0 +1,20 @@
+# Generated by Django 4.0.4 on 2022-05-04 14:27
+
+from django.conf import settings
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('courses', '0002_alter_buses_driver_name'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='driver',
+            name='user',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, unique=True),
+        ),
+    ]
Index: ../../ecourses/courses/migrations/0001_initial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/migrations/0001_initial.py b/../../ecourses/courses/migrations/0001_initial.py
new file mode 100644
--- /dev/null	(date 1652450806853)
+++ b/../../ecourses/courses/migrations/0001_initial.py	(date 1652450806853)
@@ -0,0 +1,235 @@
+# Generated by Django 4.0.4 on 2022-05-04 14:14
+
+from django.conf import settings
+import django.contrib.auth.models
+import django.contrib.auth.validators
+from django.db import migrations, models
+import django.db.models.deletion
+import django.utils.timezone
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('auth', '0012_alter_user_first_name_max_length'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='User',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('password', models.CharField(max_length=128, verbose_name='password')),
+                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
+                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
+                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
+                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
+                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
+                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
+                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
+                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
+                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
+                ('avatar', models.ImageField(null=True, upload_to='users/%Y/%m')),
+                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
+                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
+            ],
+            options={
+                'verbose_name': 'user',
+                'verbose_name_plural': 'users',
+                'abstract': False,
+            },
+            managers=[
+                ('objects', django.contrib.auth.models.UserManager()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Buses',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('active', models.BooleanField(default=True)),
+                ('created_date', models.DateTimeField(auto_now_add=True)),
+                ('updated_date', models.DateTimeField(auto_now=True)),
+                ('name', models.CharField(max_length=100, unique=True)),
+                ('image', models.ImageField(blank=True, null=True, upload_to='buses/%Y/%m')),
+                ('time', models.DateTimeField(blank=True, null=True)),
+            ],
+            options={
+                'abstract': False,
+            },
+        ),
+        migrations.CreateModel(
+            name='Car',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('active', models.BooleanField(default=True)),
+                ('created_date', models.DateTimeField(auto_now_add=True)),
+                ('updated_date', models.DateTimeField(auto_now=True)),
+                ('name', models.CharField(max_length=40)),
+                ('image', models.ImageField(null=True, upload_to='car/%Y/%m')),
+                ('number', models.CharField(max_length=40)),
+            ],
+            options={
+                'abstract': False,
+            },
+        ),
+        migrations.CreateModel(
+            name='Category',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('active', models.BooleanField(default=True)),
+                ('created_date', models.DateTimeField(auto_now_add=True)),
+                ('updated_date', models.DateTimeField(auto_now=True)),
+                ('name', models.CharField(max_length=50, unique=True)),
+            ],
+            options={
+                'abstract': False,
+            },
+        ),
+        migrations.CreateModel(
+            name='Tag',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('active', models.BooleanField(default=True)),
+                ('created_date', models.DateTimeField(auto_now_add=True)),
+                ('updated_date', models.DateTimeField(auto_now=True)),
+                ('name', models.CharField(max_length=50, unique=True)),
+            ],
+            options={
+                'abstract': False,
+            },
+        ),
+        migrations.CreateModel(
+            name='UserBusesView',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('counter', models.IntegerField(default=0)),
+                ('reading_date', models.DateTimeField(auto_now=True)),
+                ('buses', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.buses')),
+                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
+            ],
+            options={
+                'unique_together': {('user', 'buses')},
+            },
+        ),
+        migrations.CreateModel(
+            name='Ticket',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('active', models.BooleanField(default=True)),
+                ('created_date', models.DateTimeField(auto_now_add=True)),
+                ('updated_date', models.DateTimeField(auto_now=True)),
+                ('name', models.CharField(max_length=22)),
+                ('buses_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.buses')),
+                ('number', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='courses.car')),
+                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
+            ],
+            options={
+                'abstract': False,
+            },
+        ),
+        migrations.CreateModel(
+            name='Route',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('active', models.BooleanField(default=True)),
+                ('created_date', models.DateTimeField(auto_now_add=True)),
+                ('updated_date', models.DateTimeField(auto_now=True)),
+                ('destination', models.CharField(max_length=100, unique=True)),
+                ('name', models.CharField(max_length=100)),
+                ('price', models.CharField(max_length=50)),
+                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='courses.category')),
+            ],
+            options={
+                'unique_together': {('destination', 'category')},
+            },
+        ),
+        migrations.CreateModel(
+            name='Driver',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('active', models.BooleanField(default=True)),
+                ('created_date', models.DateTimeField(auto_now_add=True)),
+                ('updated_date', models.DateTimeField(auto_now=True)),
+                ('name', models.CharField(max_length=100, unique=True)),
+                ('phone_number', models.CharField(max_length=10)),
+                ('address', models.CharField(max_length=500)),
+                ('date_of_bird', models.CharField(max_length=50)),
+                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
+            ],
+            options={
+                'abstract': False,
+            },
+        ),
+        migrations.CreateModel(
+            name='Comment',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('active', models.BooleanField(default=True)),
+                ('created_date', models.DateTimeField(auto_now_add=True)),
+                ('updated_date', models.DateTimeField(auto_now=True)),
+                ('content', models.TextField()),
+                ('buses', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='courses.buses')),
+                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
+            ],
+            options={
+                'abstract': False,
+            },
+        ),
+        migrations.AddField(
+            model_name='buses',
+            name='car_name',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.car'),
+        ),
+        migrations.AddField(
+            model_name='buses',
+            name='driver_name',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.driver'),
+        ),
+        migrations.AddField(
+            model_name='buses',
+            name='route_name',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buses', related_query_name='my_buses', to='courses.route'),
+        ),
+        migrations.AddField(
+            model_name='buses',
+            name='tags',
+            field=models.ManyToManyField(blank=True, related_name='buses', to='courses.tag'),
+        ),
+        migrations.AddField(
+            model_name='buses',
+            name='viewers',
+            field=models.ManyToManyField(through='courses.UserBusesView', to=settings.AUTH_USER_MODEL),
+        ),
+        migrations.CreateModel(
+            name='Rating',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('created_date', models.DateTimeField(auto_now_add=True)),
+                ('updated_date', models.DateTimeField(auto_now=True)),
+                ('rate', models.SmallIntegerField(default=0)),
+                ('buses', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.buses')),
+                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
+            ],
+            options={
+                'abstract': False,
+                'unique_together': {('user', 'buses')},
+            },
+        ),
+        migrations.CreateModel(
+            name='Like',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('created_date', models.DateTimeField(auto_now_add=True)),
+                ('updated_date', models.DateTimeField(auto_now=True)),
+                ('active', models.BooleanField(default=False)),
+                ('buses', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.buses')),
+                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
+            ],
+            options={
+                'abstract': False,
+                'unique_together': {('user', 'buses')},
+            },
+        ),
+    ]
Index: ../../ecourses/courses/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/admin.py b/../../ecourses/courses/admin.py
new file mode 100644
--- /dev/null	(date 1652450806852)
+++ b/../../ecourses/courses/admin.py	(date 1652450806852)
@@ -0,0 +1,94 @@
+from django.contrib import admin
+from django.db.models import Count
+from django.template.response import TemplateResponse
+from .models import Category, Route, Buses, Tag, Comment, Car, User, Driver, Ticket
+from django.utils.html import mark_safe
+from django import forms
+from ckeditor_uploader.widgets import CKEditorUploadingWidget
+from django.urls import path
+
+
+class RouteAppAdminSite(admin.AdminSite):
+        site_header = 'Hệ thống quản lý vé xe khách'
+
+        def get_urls(self):
+            return [
+                       path('route-stats/', self.stats_view)
+                   ] + super().get_urls()
+
+        def stats_view(self, request):
+            c1 = Route.objects.filter(active=True).count()
+            c2 = Buses.objects.filter(active=True).count()
+            stats = Route.objects.annotate(buses_count=Count('my_buses')) \
+                .values('id', 'name', 'category', 'buses_count')
+            cate = Category.objects.annotate().values('id', 'name')
+
+            return TemplateResponse(request,
+                                    'admin/route-stats.html', {
+                                        'count1': c1,
+                                        'count2': c2,
+                                        'stats': stats,
+                                        'cate':cate
+                                    })
+
+
+admin.site = RouteAppAdminSite(name='myadmin')
+
+
+
+class BusesForm(forms.ModelForm):
+    content = forms.CharField(widget=CKEditorUploadingWidget)
+
+    class Meta:
+        model = Route
+        fields = '__all__'
+
+
+
+class BusesInlineAdmin(admin.StackedInline):
+    model = Buses
+    fk_name = 'route_name' # tên khoá ngoại (tuỳ chọn)
+
+
+
+class RouteAdmin(admin.ModelAdmin):
+    list_display = ['id', 'destination', 'name', 'category', 'price']
+    search_fields = ['price', 'name', 'destination']
+    list_filter = ['price', 'name', 'destination', 'category']
+    inlines = [BusesInlineAdmin, ]
+
+
+
+
+class BusesTagInlineAdmin(admin.TabularInline):
+    model = Buses.tags.through
+
+
+
+class TagAdmin(admin.ModelAdmin):
+    inlines = [BusesTagInlineAdmin, ]
+
+
+class BusesAdmin(admin.ModelAdmin):
+    form = BusesForm
+    inlines = [BusesTagInlineAdmin, ]
+    list_display = ['id', 'name', 'route_name', 'time', 'seats_status']
+    search_fields = ['time', 'name']
+    list_filter = ['route_name', 'time', 'seats_status']
+
+
+
+
+class TicketAdmin(admin.ModelAdmin):
+    list_display = ['id', 'name', 'user', 'Payment_status']
+
+
+admin.site.register(Category)
+admin.site.register(Route, RouteAdmin)
+admin.site.register(Buses, BusesAdmin)
+admin.site.register(Ticket, TicketAdmin)
+admin.site.register(Driver)
+admin.site.register(User)
+admin.site.register(Car)
+admin.site.register(Tag)
+admin.site.register(Comment)
\ No newline at end of file
Index: ../../ecourses/courses/apps.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/courses/apps.py b/../../ecourses/courses/apps.py
new file mode 100644
--- /dev/null	(date 1652450806852)
+++ b/../../ecourses/courses/apps.py	(date 1652450806852)
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class CoursesConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'courses'
Index: ../../ecourses/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/.idea/modules.xml b/../../ecourses/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1652450806845)
+++ b/../../ecourses/.idea/modules.xml	(date 1652450806845)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/ecourses.iml" filepath="$PROJECT_DIR$/.idea/ecourses.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: ../../ecourses/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/.idea/vcs.xml b/../../ecourses/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1652450806847)
+++ b/../../ecourses/.idea/vcs.xml	(date 1652450806847)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: ../../ecourses/.idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/.idea/inspectionProfiles/profiles_settings.xml b/../../ecourses/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1652450806843)
+++ b/../../ecourses/.idea/inspectionProfiles/profiles_settings.xml	(date 1652450806843)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: ../../ecourses/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/.idea/misc.xml b/../../ecourses/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1652450806844)
+++ b/../../ecourses/.idea/misc.xml	(date 1652450806844)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
+  <component name="PyCharmProfessionalAdvertiser">
+    <option name="shown" value="true" />
+  </component>
+</project>
\ No newline at end of file
Index: ../../ecourses/.idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/.idea/inspectionProfiles/Project_Default.xml b/../../ecourses/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(date 1652450806842)
+++ b/../../ecourses/.idea/inspectionProfiles/Project_Default.xml	(date 1652450806842)
@@ -0,0 +1,26 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="PyArgumentEqualDefaultInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyChainedComparisonsInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyRedundantParenthesesInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyRelativeImportInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyShadowingBuiltinsInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredNames">
+        <list>
+          <option value="id" />
+        </list>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="PyShadowingNamesInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PySingleQuotedDocstringInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyUnresolvedReferencesInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredIdentifiers">
+        <list>
+          <option value="pymysql" />
+        </list>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="UnresolvedReference" enabled="true" level="WARNING" enabled_by_default="true" />
+  </profile>
+</component>
\ No newline at end of file
Index: ../../ecourses/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/.idea/.gitignore b/../../ecourses/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1652450806841)
+++ b/../../ecourses/.idea/.gitignore	(date 1652450806841)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: ../../ecourses/.idea/ecourses.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/.idea/ecourses.iml b/../../ecourses/.idea/ecourses.iml
new file mode 100644
--- /dev/null	(date 1652450806842)
+++ b/../../ecourses/.idea/ecourses.iml	(date 1652450806842)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+</module>
\ No newline at end of file
Index: ../../ecourses/manage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../ecourses/manage.py b/../../ecourses/manage.py
new file mode 100644
--- /dev/null	(date 1652450806900)
+++ b/../../ecourses/manage.py	(date 1652450806900)
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecourses.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
Index: ../../.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../.idea/modules.xml b/../../.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1652450806841)
+++ b/../../.idea/modules.xml	(date 1652450806841)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/BTLon.iml" filepath="$PROJECT_DIR$/.idea/BTLon.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: ../../main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../main.py b/../../main.py
new file mode 100644
--- /dev/null	(date 1652450806901)
+++ b/../../main.py	(date 1652450806901)
@@ -0,0 +1,16 @@
+# This is a sample Python script.
+
+# Press Shift+F10 to execute it or replace it with your code.
+# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.
+
+
+def print_hi(name):
+    # Use a breakpoint in the code line below to debug your script.
+    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.
+
+
+# Press the green button in the gutter to run the script.
+if __name__ == '__main__':
+    print_hi('PyCharm')
+
+# See PyCharm help at https://www.jetbrains.com/help/pycharm/
Index: ../../README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../README.md b/../../README.md
new file mode 100644
--- /dev/null	(date 1652450806841)
+++ b/../../README.md	(date 1652450806841)
@@ -0,0 +1,1 @@
+# BTLON-CCNLTHD-
diff --git a/../../ecourses/ecourses/__init__.py b/../../ecourses/ecourses/__init__.py
new file mode 100644
diff --git a/../../ecourses/courses/migrations/__init__.py b/../../ecourses/courses/migrations/__init__.py
new file mode 100644
diff --git a/../../ecourses/courses/__init__.py b/../../ecourses/courses/__init__.py
new file mode 100644
